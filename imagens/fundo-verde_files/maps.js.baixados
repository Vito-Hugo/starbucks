var maps = {

    loaded: false,

    autocompleteSessionToken: null,

    autocompleteTimeout: null,

    autocompleteTriggerTimeout: 1300,

    log: function (value) {
        console.log("Google Maps Library:", value);
    },

    defaultError: function () {
        util.showToast("msg.connectionError" );
    },

    onMapsLoaded: function () {
        $(window).trigger("googleMapsLoaded");
    },

    load: function(googleApiKey){

        var deferred = $.Deferred();

        if (maps.loaded === true) {
            deferred.resolve();
            return deferred;
        }

        maps.log("Loading...");

        $(window).bind("googleMapsLoaded", function () {
            maps.log("Done loading!");
            maps.loaded = true;
            deferred.resolve();
        });

        $.ajax({
            url: "https://maps.googleapis.com/maps/api/js?key=" + googleApiKey + "&v=3.exp&sensor=false&libraries=places&callback=maps.onMapsLoaded",
            dataType: "script",
            type: "GET",
            showWait: false,
        }).done(deferred.resolve).fail(deferred.reject);

        return deferred.promise();
        
    },

    // getPlacePredictions: function (input, latLngLiteral) {

    //     var deferred = $.Deferred(),
    //         autocompleteService = new google.maps.places.AutocompleteService(),
    //         location = new google.maps.LatLng(latLngLiteral);

    //     if (maps.autocompleteSessionToken === null) {
    //         maps.autocompleteSessionToken = new google.maps.places.AutocompleteSessionToken();
    //     }

    //     if (maps.autocompleteTimeout) {
    //         window.clearTimeout(maps.autocompleteTimeout);
    //     }

    //     maps.autocompleteTimeout = window.setTimeout(function () {

    //         if ( ! input.length) {
    //             deferred.resolve([]);
    //             return;
    //         }

    //         autocompleteService.getPlacePredictions({
    //             input: input,
    //             location: location,
    //             radius: 0,
    //             sessionToken: maps.autocompleteSessionToken,
    //             types: ["address"],
    //             componentRestrictions: {
    //                 country: "br"
    //             }
    //         }, function (predictions, status) {
    
    //             if (
    //                 status !== google.maps.places.PlacesServiceStatus.OK &&
    //                 status !== google.maps.places.PlacesServiceStatus.ZERO_RESULTS &&
    //                 status !== google.maps.places.PlacesServiceStatus.OVER_QUERY_LIMIT
    //             ) {
    //                 deferred.reject(status);
    //                 maps.defaultError();
    //                 return;
    //             }
    
    //             deferred.resolve(predictions || []);
    
    //         });

    //     }, maps.autocompleteTriggerTimeout);

        

    //     return deferred;

    // },

    getPlacePredictions: function (input, latLngLiteral) {

        const center = { lat: latLngLiteral.lat, lng: latLngLiteral.lng };
        
        const options = {
            componentRestrictions: { country: "br" },
            fields: ["address_components", "geometry", "icon", "name"]
            // strictBounds: false,
            // types: ["establishment"],
        };
        const autocomplete = new google.maps.places.Autocomplete(input, options);

        console.log(autocomplete);

    },

    getConvertedAddressComponentType: function (componentTypes) {

        var type = "",
            typesMap = {
                number: ["street_number"],
                zipCode: ["postal_code"],
                street: ["route"],
                district: ["sublocality_level_1", "sublocality"],
                city: ["administrative_area_level_2"],
                state: ["administrative_area_level_1"],
                country: ["country"]
            };

        Object.keys(typesMap).map(function (key) {
            if (typesMap.hasOwnProperty(key)) {
                typesMap[key].map(function(componentType) {
                    if (componentTypes.indexOf(componentType) !== -1) {
                        type = key;
                    }
                });
            }
        });

        return type;

    },

    extractAddressComponents: function (result) {

        var addressComponents = {
            street: "",
            number: "",
            district: "",
            city: "",
            state: "",
            country: "",
            zipCode: ""
        };

        result.address_components.map(function (component) {

            var componentType = maps.getConvertedAddressComponentType(component.types),
                componentName = component.long_name;

            if (componentType.length) {
                if (componentType === "state") {
                    componentName = component.short_name;
                }
                addressComponents[componentType] = componentName;
            }

        });

        return addressComponents;

    },

    getPlaceDetails: function(placeId) {

        var deferred = $.Deferred(),
            placesService = new google.maps.places.PlacesService(document.createElement("div")),
            options = {
                placeId: placeId
            };

        if (maps.autocompleteSessionToken !== null) {
            $.extend(options, {
                sessionToken: maps.autocompleteSessionToken
            });
        }

        placesService.getDetails(options, function (result, status) {

            maps.autocompleteSessionToken = null;

            if (status !== google.maps.places.PlacesServiceStatus.OK) {
                deferred.reject(status);
                maps.defaultError();
                return;
            }

            deferred.resolve($.extend({
                placeId: result.place_id,
                formattedAddress: result.formatted_address,
                latitude: result.geometry.location.lat(),
                longitude: result.geometry.location.lng()
            }, maps.extractAddressComponents(result)));

        });

        return deferred;

    },

    findPlaceFromQuery: function (query) {

        var deferred = $.Deferred(),
            placesService = new google.maps.places.PlacesService(document.createElement("div"));

        placesService.findPlaceFromQuery({
            fields: ["ALL"],
            query: query
        }, function (results, status) {

            if (status !== google.maps.places.PlacesServiceStatus.OK) {
                deferred.reject(status);
                return;
            }

            deferred.resolve(results[0]);

        });

        return deferred.promise();

    },

    getStaticMapImage: function (options) {

        var deferred = $.Deferred(),
            s = $.extend({}, {
                lat: "",
                lng: "",
                width: 0,
                height: 0
            }, options);

        var image = new Image(s.width, s.height);

        image.onerror = function () {
            deferred.reject();
            maps.defaultError();
        };

        image.onload = function () {
            deferred.resolve(image);
        };

        image.src = "https://maps.googleapis.com/maps/api/staticmap?center=" + s.lat + "," + s.lng + "&zoom=15&scale=2&maptype=roadmap&key=" + config.googleApiKey + "&size=" + s.width + "x" + s.height + "&markers=color:red%7C" + s.lat + "," + s.lng;

        return deferred;

    },

    renderInteractiveMap: function (mapContainer, options) {
        return new google.maps.Map(mapContainer, options);
    },

    addMarker: function (position, map, title, icon) {
        return new google.maps.Marker({
            position: position,
            map: map,
            title: title || "",
            icon: icon
        });
    },

    createInfoWindow: function(content) {
        return new google.maps.InfoWindow({
            content: content
        });
    },

    getInstance: function () {
        return google.maps;
    },

    createPoint: function (x, y) {
        return new google.maps.Point(x, y);
    },

    createSize: function (w, h) {
        return new google.maps.Size(w, h);
    },

    createLatLng: function (lat, lng) {
        return new google.maps.LatLng(lat, lng);
    },

    getBounds: function (latLng, radius) {
        var center = new google.maps.LatLng(latLng.lat, latLng.lng),
            circle = new google.maps.Circle({
                radius: radius,
                center: center
            });
        return circle.getBounds();
    },

    refreshMap: function (map) {
        google.maps.event.trigger(map, 'idle');
    }

};